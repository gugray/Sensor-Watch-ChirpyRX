{
  "version": 3,
  "sources": ["../src/fftAnalyzer.js", "../src/chirpy-rx.js", "../src/base64.js", "../src/app.js"],
  "sourcesContent": ["class FFTAnalyzer {\n\n  constructor(sampleRate, fftSize) {\n    this.fftSize = fftSize;\n    this.sampleRate = sampleRate;\n    this.fft = new FFT(fftSize, sampleRate);\n    this.spectra = [];\n  }\n\n  connect(audioCtx, inputNode) {\n    this.audioCtx = audioCtx;\n    this.inputNode = inputNode;\n    this.procFun = (evt) => this.processEvent(evt);\n    this.processor = audioCtx.createScriptProcessor(this.fftSize, 1, 1);\n    this.processor.addEventListener(\"audioprocess\", this.procFun);\n    inputNode.connect(this.processor);\n  }\n\n  disconnect() {\n    this.processor.removeEventListener(\"audioprocess\", this.procFun);\n    this.inputNode.disconnect(this.proc);\n  }\n\n  processEvent(evt) {\n    this.processData((evt.inputBuffer.getChannelData(0)));\n  }\n\n  processData(data) {\n    this.fft.forward(data);\n    let s = new Float32Array(this.fft.spectrum.length);\n    for (let i = 0; i < s.length; ++i) s[i] = this.fft.spectrum[i];\n    this.spectra.push(s);\n  }\n\n  getSamples() {\n    let samples = [];\n    let msec = 0;\n    for (const s of this.spectra) {\n      let sample = msec.toFixed(1);\n      sample = sample.padStart(8, \" \");\n      for (const val of s) {\n        sample += \" \";\n        sample += val.toFixed(4);\n      }\n      msec += this.fftSize / this.sampleRate * 1000;\n      samples.push(sample);\n    }\n    return samples;\n  }\n}\n\nexport {FFTAnalyzer}\n\n", "class ToneStencil {\n  constructor(freq, sampleRate, fftSize) {\n    this.freq = freq;\n    this.bins = getBins(freq, sampleRate, fftSize, true);\n  }\n}\n\nfunction getBins(freq, sampleRate, fftSize, multiple = false) {\n  const bandwidth = sampleRate / fftSize;\n  let midIx = -1;\n  for (let i = 0; i < fftSize / 2; ++i) {\n    if (freq > i * bandwidth && freq <= (i+1) * bandwidth) {\n      midIx = i;\n      break;\n    }\n  }\n  if (multiple) return [midIx - 1, midIx, midIx + 1];\n  else return [midIx];\n}\n\nclass Demodulator {\n\n  constructor({sampleRate, fftSize, toneRate, baseFreq, freqStep, nFreqs}) {\n\n    const bitSize = Math.log(nFreqs - 1) / Math.log(2);\n    if (bitSize != Math.round(bitSize))\n      throw \"nFreqs must be 2^x+1, e.g., 5, 9 or 17\";\n\n    this.bitSize = bitSize;\n    this.sampleRate = sampleRate;\n    this.fftSize = fftSize;\n    this.toneRate = toneRate;\n    this.sampleLenMsec = this.fftSize / this.sampleRate * 1000;\n    this.toneLenMsec = 1000 / this.toneRate;\n\n    this.symFreqs = [];\n    for (let i = 0; i < nFreqs; ++i)\n      this.symFreqs.push(baseFreq + freqStep * i);\n\n    this.stencils = [];\n    for (const freq of this.symFreqs)\n      this.stencils.push(new ToneStencil(freq, sampleRate, fftSize));\n  }\n\n  detecToneAt(spectra, msec) {\n    const ixAt = Math.round(msec / this.sampleLenMsec);\n    const tone0 = detectTone(spectra[ixAt-1], this.stencils);\n    const tone1 = detectTone(spectra[ixAt], this.stencils);\n    const tone2 = detectTone(spectra[ixAt+1], this.stencils);\n    if (tone0 == tone1 || tone0 == tone2) return tone0;\n    if (tone1 == tone2) return tone1;\n    return -1;\n  }\n\n  findStartMsec(spectra) {\n\n    let firstMatchIx = -1, lastMatchIx = -1;\n    for (let ix0 = 0; ix0 < spectra.length; ++ix0) {\n      const msec0 = ix0 * this.sampleLenMsec;\n      const ix1 = Math.round((msec0 + this.toneLenMsec) / this.sampleLenMsec);\n      const ix2 = Math.round((msec0 + 2 * this.toneLenMsec) / this.sampleLenMsec);\n      const ix3 = Math.round((msec0 + 3 * this.toneLenMsec) / this.sampleLenMsec);\n      if (ix3 > spectra.length - 1) break;\n      const tone0 = detectTone(spectra[ix0], this.stencils);\n      const tone1 = detectTone(spectra[ix1], this.stencils);\n      const tone2 = detectTone(spectra[ix2], this.stencils);\n      const tone3 = detectTone(spectra[ix3], this.stencils);\n      if (tone0 == this.symFreqs.length - 1 && tone1 == 0 &&\n          tone2 == this.symFreqs.length - 1 && tone3 == 0) {\n        if (firstMatchIx == -1) {\n          firstMatchIx = lastMatchIx = ix0;\n        }\n        else lastMatchIx = ix0;\n      }\n      else if (firstMatchIx != -1) break;\n    }\n\n    if (firstMatchIx == -1) return -1;\n    const midMatchIx = Math.round((firstMatchIx + lastMatchIx) / 2);\n    return Math.floor(midMatchIx * this.sampleLenMsec);\n  }\n\n}\n\nlet v1 = null;\n\nfunction detectTone(spectrum, stencils) {\n\n  if (!v1 || v1.length != stencils.length)\n    v1 = new Float32Array(stencils.length);\n\n  for (let i = 0; i < v1.length; ++i) v1[i] = 0;\n\n  // At each position, sum up values in spectrum from the slots defined by the stencil\n  // This is the strength of each tone as viewed through the stencil\n  for (let toneIx = 0; toneIx < stencils.length; ++toneIx) {\n    const stencil = stencils[toneIx];\n    for (const binIx of stencil.bins)\n      v1[toneIx] += spectrum[binIx];\n  }\n\n  // Find index of strongest tone\n  let maxVal = Number.MIN_VALUE, maxIx = -1;\n  for (let i = 0; i < v1.length; ++i) {\n    if (v1[i] > maxVal) {\n      maxVal = v1[i];\n      maxIx = i;\n    }\n  }\n\n  // Sum up other values\n  let restSum = 0;\n  for (let i = 0; i < v1.length; ++i) {\n    if (i != maxIx)\n      restSum += v1[i];\n  }\n\n  // Check if highest band is sufficiently stronger than others\n  let ratio = maxVal / restSum;\n  if (ratio >= 0.1) return maxIx;\n  else return -1;\n}\n\nclass Block {\n  constructor(startTonePos, nTones, bytes, crc) {\n    this.startTonePos = startTonePos;\n    this.nTones = nTones;\n    this.bytes = bytes;\n    this.ascii = getAscii(bytes);\n    this.crc = crc;\n    this.valid = crc == getCRC8(bytes);\n  }\n}\n\nclass Decoder {\n  constructor(tones) {\n    this.tones = tones;\n    this.blocks = decode(tones);\n    this.bytes = catBytes(this.blocks);\n    this.ascii = catAscii(this.blocks);\n    this.valid = true;\n    for (const block of this.blocks)\n      if (!block.valid)\n        this.valid = false;\n  }\n}\n\nfunction getAscii(bytes) {\n  let res = \"\";\n  for (const b of bytes) {\n    res += String.fromCodePoint(b);\n  }\n  return res;\n}\n\nfunction catBytes(blocks) {\n  const bytes = [];\n  for (const block of blocks) {\n    bytes.push(...block.bytes);\n  }\n  return bytes;\n}\n\nfunction catAscii(blocks) {\n  let str = \"\";\n  for (const block of blocks) {\n    str += block.ascii;\n  }\n  return str;\n}\n\nfunction decode(tones) {\n  const blocks = [];\n  // Single-byte transmission is 14 tones\n  if (tones.length < 14) return blocks;\n  // Start sequence\n  if (tones[0] != 8 || tones[1] != 0 || tones[2] != 8 || tones[3] != 0) return blocks;\n  // Go block by block\n  let ix = 4;\n  while (true) {\n    const endIx = getBlockEndIx(tones, ix);\n    if (endIx == -1) break;\n    blocks.push(decodeBlock(tones.slice(ix, endIx)));\n    ix = endIx;\n  }\n  return blocks;\n}\n\nconst toneBits = [\n  [0, 0, 0],\n  [0, 0, 1],\n  [0, 1, 0],\n  [0, 1, 1],\n  [1, 0, 0],\n  [1, 0, 1],\n  [1, 1, 0],\n  [1, 1, 1],\n];\n\nfunction getToneBits(tone) {\n  // For wrong tones (interim 8s): don't crash\n  // We hope that CRC will catch this\n  return toneBits[tone % 8];\n}\n\nfunction decodeBlock(tones, start, end) {\n\n  const seq = tones.slice(start, end);\n\n  const bits = [];\n  for (let i = 0; i < seq.length - 5; ++i)\n    bits.push(...getToneBits(seq[i]));\n  const crcBits = [\n    ...getToneBits(seq[seq.length-4]),\n    ...getToneBits(seq[seq.length-3]),\n    ...getToneBits(seq[seq.length-2]),\n  ];\n  const bytes = getBytes(bits);\n  const crcBytes = getBytes(crcBits);\n  return new Block(start, end - start, bytes, crcBytes[0]);\n}\n\nfunction getBytes(bits) {\n  const res = [];\n  for (let i = 0; i + 8 <= bits.length; i += 8) {\n    let val = 0;\n    for (let j = 0; j < 8; ++j) {\n      val <<= 1;\n      val += bits[i + j];\n    }\n    res.push(val);\n  }\n  return res;\n}\n\nfunction getBlockEndIx(tones, startIx) {\n  // Find next 8NNN8\n  for (let i = startIx + 4; i < tones.length; ++i) {\n    if (tones[i] == 8 && tones[i -4] == 8) {\n      return i + 1;\n    }\n  }\n  return -1;\n}\n\nfunction getCRC8(bytes) {\n\n  let crc = 0;\n  for (const b of bytes)\n    crc = updateCRC(b, crc);\n  return crc;\n\n  function updateCRC(nextByte, crc) {\n    for (let j = 0; j < 8; j++) {\n      let mix = (crc ^ nextByte) & 0x01;\n      crc >>= 1;\n      if (mix)\n        crc ^= 0x8C;\n      nextByte >>= 1;\n    }\n    return crc;\n  }\n}\n\nexport {ToneStencil, Demodulator, Block, Decoder}\n", "// With love from https://gist.github.com/jonleighton/958841\n// Copyright 2011 Jon Leighton\n// MIT license\nfunction toBase64(bytes) {\n  let base64 = '';\n  let encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  let byteLength = bytes.length;\n  let byteRemainder = byteLength % 3;\n  let mainLength = byteLength - byteRemainder;\n  let a, b, c, d;\n  let chunk;\n  // Main loop deals with bytes in chunks of 3\n  for (let i = 0; i < mainLength; i = i + 3) {\n    // Combine the three bytes into a single integer\n    chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n    // Use bitmasks to extract 6-bit segments from the triplet\n    a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n    b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12\n    c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6\n    d = chunk & 63;               // 63       = 2^6 - 1\n    // Convert the raw binary segments to the appropriate ASCII encoding\n    base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n  }\n  // Deal with the remaining bytes and padding\n  if (byteRemainder == 1) {\n    chunk = bytes[mainLength];\n    a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n    // Set the 4 least significant bits to zero\n    b = (chunk & 3) << 4; // 3   = 2^2 - 1\n    base64 += encodings[a] + encodings[b] + '==';\n  } else if (byteRemainder == 2) {\n    chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];\n    a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n    b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4\n    // Set the 2 least significant bits to zero\n    c = (chunk & 15) << 2; // 15    = 2^4 - 1\n    base64 += encodings[a] + encodings[b] + encodings[c] + '=';\n  }\n  let res = \"\";\n  for (let i = 0; i < base64.length; ++i) {\n    if (i > 0 && (i % 76) == 0) res += \"\\n\";\n    res += base64[i];\n  }\n  return res;\n}\n\n// With love from https://github.com/danguer/blog-examples/blob/master/js/base64-binary.js\n// Copyright 2011, Daniel Guerrero\nfunction fromBase64(input, uarray, offset) {\n  const encodings = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  //get last chars to see if are valid\n  input = removePaddingChars(input);\n  input = removePaddingChars(input);\n  let bytes = parseInt((input.length / 4) * 3, 10);\n  let chr1, chr2, chr3;\n  let enc1, enc2, enc3, enc4;\n  let i = 0;\n  let j = 0;\n  input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n  for (i = 0; i < bytes; i += 3) {\n    //get the 3 octects in 4 ascii chars\n    enc1 = encodings.indexOf(input.charAt(j++));\n    enc2 = encodings.indexOf(input.charAt(j++));\n    enc3 = encodings.indexOf(input.charAt(j++));\n    enc4 = encodings.indexOf(input.charAt(j++));\n    chr1 = (enc1 << 2) | (enc2 >> 4);\n    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n    chr3 = ((enc3 & 3) << 6) | enc4;\n    uarray[i + offset] = chr1;\n    if (enc3 != 64) uarray[i + 1 + offset] = chr2;\n    if (enc4 != 64) uarray[i + 2 + offset] = chr3;\n  }\n}\n\nexport {fromBase64, toBase64};\n", "import {FFTAnalyzer} from \"./fftAnalyzer.js\";\nimport {ToneStencil, Demodulator, Block, Decoder} from \"./chirpy-rx.js\";\nimport {runChirpyRxTests} from \"./chirpy-rx-tests.js\";\nimport {toBase64} from \"./base64.js\";\n\nconst audioFile = \"data-w7-04.wav\";\nconst stopAtEnd = true;\nconst gainVal = 10;\nconst toneRate = 64/3;\nconst baseFreq = 2500;\nconst freqStep = 250;\nconst nFreqs = 9;\nconst fftSize = 512;\n\n// 2400 => 199\n\n// 2200 -> 5600 => 3400 range\n// 2200 + n * 375\n\nlet elmBtnRecord;\nlet elmDownloadRec;\nlet elmDownloadSamples;\nlet elmDecoded;\nlet elmCanvas;\nlet elmBtnPlay;\nlet elmBtnAnalyze;\nlet elmStencil;\n\nlet audioCtx, gain, buffer, source, scriptNode, encoder;\nlet isPlaying = false;\nlet fftAnalyzer;\nlet spectra;\nlet dem, startMsec, tones;\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\n  // runChirpyRxTests();\n\n  elmBtnRecord = document.getElementById(\"btnRecord\");\n  elmBtnRecord.addEventListener(\"click\", () => toggleRecord());\n  elmDownloadRec = document.getElementById(\"downloadRecording\");\n\n  document.getElementById(\"audioFileName\").innerText = audioFile;\n  document.getElementById(\"btnLoad\").addEventListener(\"click\", () => onLoadAudio());\n  elmBtnAnalyze = document.getElementById(\"btnAnalyze\");\n  elmBtnAnalyze.addEventListener(\"click\", () => onAnalyze());\n  elmBtnPlay = document.getElementById(\"btnPlay\");\n  elmBtnPlay.addEventListener(\"click\", () => onPlay());\n\n  elmStencil = document.getElementById(\"cbStencil\");\n  elmStencil.checked = false;\n  elmStencil.addEventListener(\"change\", () => onStencilChanged());\n  elmDecoded = document.getElementById(\"decoded\");\n  elmDownloadSamples = document.getElementById(\"downloadSample\");\n  elmCanvas = document.getElementById(\"sgCanvas\");\n});\n\nfunction toggleRecord() {\n\n  // Currently not recording\n  if (!audioCtx) {\n    navigator.mediaDevices.getUserMedia({audio: true}).then((stream) => {\n      elmBtnRecord.innerText = \"Stop\";\n      elmDownloadRec.style.display = \"none\";\n      audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      source = audioCtx.createMediaStreamSource(stream);\n      gain = audioCtx.createGain();\n      source.connect(gain);\n      scriptNode = audioCtx.createScriptProcessor(4096, 1, 1);\n      source.connect(scriptNode);\n      encoder = new WavAudioEncoder(audioCtx.sampleRate, 1);\n      scriptNode.onaudioprocess = function(e) {\n        const data = e.inputBuffer.getChannelData(0);\n        encoder.encode([data]);\n      }\n    }).catch((err) => {\n      console.error(`Error from getUserMedia(): ${err}`);\n    });\n    return;\n  }\n\n  // Currently recording: stop; create download\n  elmBtnRecord.innerText = \"Record\";\n  source.disconnect();\n  scriptNode.disconnect();\n  audioCtx = null;\n  const blob = encoder.finish();\n  const url = window.URL.createObjectURL(blob);\n  elmDownloadRec.href = url;\n  elmDownloadRec.download = \"data.wav\";\n  elmDownloadRec.style.display = \"inline\";\n}\n\nfunction createSamplesDownload(samples) {\n\n  let downloadText = \"\";\n  for (const line of samples) {\n    if (downloadText.length > 0) downloadText += \"\\n\";\n    downloadText += line;\n  }\n\n  const fileName = \"spectra.txt\";\n  const data = [downloadText];\n  const properties = {type: \"text/plain\"};\n  let file;\n  try {\n    file = new File(data, fileName, properties);\n  } catch {\n    file = new Blob(data, properties);\n  }\n  const url = URL.createObjectURL(file);\n\n  elmDownloadSamples.href = url;\n  elmDownloadSamples.download = fileName;\n  elmDownloadSamples.style.display = \"inline\";\n}\n\nfunction onLoadAudio() {\n  audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n  gain = audioCtx.createGain();\n  gain.connect(audioCtx.destination);\n  gain.gain.setValueAtTime(gainVal, audioCtx.currentTime);\n\n  const req = new XMLHttpRequest();\n  req.open('GET', audioFile, true);\n  req.responseType = 'arraybuffer';\n  req.onload = function () {\n    const audioData = req.response;\n    audioCtx.decodeAudioData(audioData).then(buf => {\n      buffer = buf;\n      elmBtnPlay.style.display = \"inline\";\n      elmBtnAnalyze.style.display = \"inline\";\n    }).catch(err => {\n      console.log(\"Error decoding audio data: \" + err.err);\n    });\n  }\n  req.send();\n}\n\nfunction playOver() {\n  elmBtnPlay.innerText = \"Play\";\n  source.disconnect(gain);\n  source.stop(audioCtx.currentTime);\n  source = null;\n  fftAnalyzer.disconnect();\n  retrieveFFTSamples();\n  fftAnalyzer = null;\n  isPlaying = false;\n}\n\nfunction retrieveFFTSamples() {\n  spectra = fftAnalyzer.spectra;\n  const fftSamples = fftAnalyzer.getSamples();\n  createSamplesDownload(fftSamples);\n\n  dem = new Demodulator({\n    sampleRate: buffer.sampleRate,\n    fftSize,\n    toneRate,\n    baseFreq,\n    freqStep,\n    nFreqs});\n  startMsec = dem.findStartMsec(spectra);\n  const recLen = Math.round(buffer.length / buffer.sampleRate * 1000);\n  elmDecoded.innerText = \"Start detected at \" + startMsec + \" (total length: \" + recLen + \")\\n\";\n\n  tones = [];\n  let endDetected = false;\n  if (startMsec != -1) {\n    for (let i = 0; !stopAtEnd || !endDetected; ++i) {\n      const msec = startMsec + dem.toneLenMsec * i;\n      if (msec + 200 > recLen) break;\n      const tone = dem.detecToneAt(spectra, msec);\n      tones.push(tone);\n      if (doesEndInEOM(tones, dem.symFreqs.length - 1))\n        endDetected = true;\n      // if (tone == dec.symFreqs.length - 1 && tones.length >= 2 && tones[tones.length-2] == 0) {\n      //   endDetected = true;\n      // }\n    }\n    if (!endDetected) {\n      elmDecoded.innerText += \"No EOM found\\n\";\n    }\n    elmDecoded.innerText += \"======================================================\\n\";\n    for (let i = 0; i < tones.length; ++i) {\n      if (i == 4) elmDecoded.innerText += \",\\n\";\n      else if (((i - 4) % 45) == 0) elmDecoded.innerText += \",\\n\";\n      else if (i > 0) elmDecoded.innerText += \", \";\n      // if ((i % 16) != 0) elmDecoded.innerText += \" \";\n      // else if (i > 0) elmDecoded.innerText += \"\\n\";\n      elmDecoded.innerText += tones[i];\n    }\n  }\n  const dec = new Decoder(tones);\n  elmDecoded.innerText += \"\\n======================================================\\n\";\n  elmDecoded.innerText += toBase64(dec.bytes);\n  elmDecoded.innerText += \"\\n======================================================\\n\";\n  elmDecoded.innerText += dec.ascii;\n\n  drawOutput();\n}\n\nfunction doesEndInEOM(tones, signaToneIx) {\n  if (tones.length < 3) return false;\n  for (let i = 0; i < 3; ++i) {\n    if (tones[tones.length - i - 1] != signaToneIx) return false;\n  }\n  return true;\n}\n\nfunction onPlay() {\n\n  if (isPlaying) {\n    playOver();\n    return;\n  }\n\n  source = audioCtx.createBufferSource();\n  source.buffer = buffer;\n  source.connect(gain);\n  source.start();\n  source.addEventListener(\"ended\", () => {\n    if (isPlaying) playOver();\n  });\n\n  if (fftAnalyzer) fftAnalyzer.disconnect();\n  fftAnalyzer = new FFTAnalyzer(buffer.sampleRate, fftSize);\n  fftAnalyzer.connect(audioCtx, gain);\n\n  elmBtnPlay.innerText = \"Stop\";\n  isPlaying = true;\n}\n\nfunction onAnalyze() {\n  if (fftAnalyzer) fftAnalyzer.disconnect();\n  fftAnalyzer = new FFTAnalyzer(buffer.sampleRate, fftSize);\n  const data = buffer.getChannelData(0);\n  const frame = new Float32Array(fftSize);\n  for (let ix = 0; ix + fftSize <= data.length; ix += fftSize) {\n    for (let i = 0; i < fftSize; ++i)\n      frame[i] = data[ix + i] * gainVal;\n    fftAnalyzer.processData(frame);\n  }\n  retrieveFFTSamples();\n  fftAnalyzer = null;\n}\n\nfunction drawOutput() {\n\n  const w = spectra.length;\n  const h = fftSize / 2;\n\n  elmCanvas.height = h;\n  elmCanvas.width = w;\n  elmCanvas.style.width = w + \"px\";\n  elmCanvas.style.height = h + \"px\";\n  const ctx = elmCanvas.getContext(\"2d\");\n  const imgData = ctx.getImageData(0, 0, w, h);\n\n  for (let x = 0; x < w; ++x) {\n    const s = spectra[x];\n    for (let i = 0; i < s.length; ++i) {\n      const y = h - i - 1;\n      let val = Math.floor(s[i] * 2048);\n      setPixel(imgData, x, y, val, val * 0.25, val * 0.25);\n    }\n  }\n  ctx.putImageData(imgData, 0, 0);\n  elmStencil.disabled = false;\n}\n\nfunction onStencilChanged() {\n  if (!spectra) return;\n  drawOutput();\n  if (elmStencil.checked) drawStencil(dem, tones, startMsec);\n}\n\nfunction drawStencil(dec, tones, startMsec) {\n\n  const w = spectra.length;\n  const h = dec.fftSize / 2;\n  const ctx = elmCanvas.getContext(\"2d\");\n  const imgData = ctx.getImageData(0, 0, w, h);\n\n  for (let i = 0; i < tones.length; ++i) {\n\n    const x1 = Math.round((startMsec + dec.toneLenMsec * (i-0.5)) / dec.sampleLenMsec);\n    const x2 = Math.round((startMsec + dec.toneLenMsec * (i+0.5)) / dec.sampleLenMsec);\n\n    const toneIx = tones[i];\n\n    if (toneIx == -1) {\n      drawRect(x1, 0, x2 - x1, h);\n      continue;\n    }\n\n    let y1 = dec.stencils[toneIx].bins[0];\n    let y2 = dec.stencils[toneIx].bins[dec.stencils[toneIx].bins.length - 1];\n    let rh = Math.abs(y2 - y1) + 1;\n    let y = Math.min(y1, y2);\n    drawRect(x1, h - y - 1, x2 - x1, rh);\n  }\n  ctx.putImageData(imgData, 0, 0);\n\n  function drawRect(x, y, w, h) {\n    for (let i = x; i < x + w; ++i) {\n      setPixel(imgData, i, y, 128, 128, 255);\n      setPixel(imgData, i, y + h - 1, 128, 128, 255);\n    }\n    for (let i = y; i < y + h; ++i) {\n      setPixel(imgData, x, i, 128, 128, 255);\n      setPixel(imgData, x + w - 1, i, 128, 128, 255);\n    }\n  }\n}\n\nfunction setPixel(imgd, x, y, r, g, b, a = 255) {\n  const w = imgd.width;\n  imgd.data[(y * w + x) * 4] = r;\n  imgd.data[(y * w + x) * 4 + 1] = g;\n  imgd.data[(y * w + x) * 4 + 2] = b;\n  imgd.data[(y * w + x) * 4 + 3] = a;\n}\n"],
  "mappings": "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",
  "names": ["fftSize", "audioCtx", "fftSize", "toneRate", "baseFreq", "freqStep", "nFreqs", "spectra", "tones", "crc", "tones", "startMsec", "w", "h"]
}
